import type { WaitOnOptions } from "wait-on";
import type { SpawnOptions } from "node:child_process";

export type MessageEventTypes = "JOB_MESSAGE" | "JOB_WARNING";

export type MessageData = {
  message: string;
  emit: boolean;
  jobName: string;
  timestamp: string;
};

export type MessageEvent = { type: "JOB_MESSAGE"; data: MessageData };
export type WarningEvent = { type: "JOB_WARNING"; data: MessageData };
export type CloseEvent = { type: "JOB_CLOSE" };
export type ErrorEvent = {
  type: string;
  data: Error;
};
export type ConfigImportEvent = {
  type: string;
  data: Config;
};

export type Events =
  | MessageEvent
  | WarningEvent
  | CloseEvent
  | ErrorEvent
  | ConfigImportEvent;

export type LogItem = {
  message: string;
  timestamp: string;
  jobName: string;
  emit: boolean;
  id: string;
};

export type MessageType = "message" | "warning" | "error";

export type Job = {
  id?: string; // shall be autogenerated
  name: string; // name of the job
  command: string; // command of the job
  args?: string[]; // command args
  message?: string; // message emitted before running job
  options?: SpawnOptions; // options reference: https://nodejs.org/api/child_process.html#child_processspawncommand-args-options
  // see options here: https://github.com/jeffbski/wait-on
  waitOn?: WaitOnOptions; // should the job wait for other dependencies before running?
  messageForwarding?: MessageType[]; // what messages shall emit to the user's console?
  saveLog?: boolean; // write log to disk?
};

export type Config = {
  logOutDir?: string;
  jobs: Job[];
};

export type Context = {
  config: Config;
  log: LogItem[];
  error?: Error;
};
